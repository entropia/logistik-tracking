openapi: "3.0.4"
info:
  title: "API for the goods coordination system of the GPN LOC."
  version: "0.1.0"
servers:
  - url: "http://localhost:8080"
    description: "Local development server."
paths:
  /euroCrate:
    get:
      operationId: getAllEuroCrates
      summary: "Get all euro crates."
      responses:
        "200":
          description: "Successfully retrieved all euro crates."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EuroCrateDto'
    post:
      operationId: createNewEuroCrate
      summary: "Create a new euro crate."
      security:
        - springCookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEuroCrateDto'
      responses:
        "201":
          description: "Successfully created a new euro crate."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EuroCrateDto'
        "400":
          description: "Provided euro crate information does not match specifications."
        "401":
          description: "User did not provide valid session details and cannot create a new euro crate."
        "403":
          description: "User does not have permission to create new euro crates."
        "409":
          description: "A euro crate with this combination of name and OC already exists."

  /euroCrate/{id}:
    get:
      operationId: getEuroCrate
      summary: "Get a specific euro crates with all details."
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EuroCrateId"
      responses:
        "200":
          description: "The euroCrate was successfully retrieved."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EuroCrateDto"
        "404":
          description: "The selected euroCrate does not exist."

  /euroCrate/{oc}/{name}:
    get:
      operationId: findEuroCrate
      summary: "Get a specific euro crate with oc and name"
      parameters:
        - name: "oc"
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/OperationCenterDto"
        - name: "name"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The euroCrate was successfully retrieved."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EuroCrateDto"
        "404":
          description: "The selected euroCrate does not exist."

  /euroCrate/{id}/modify:
    post:
      operationId: modifyEuroCrate
      summary: Modify multiple properties of a crate
      security:
        - springCookieAuth: []
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EuroCrateId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EuroCratePatchDto"
      responses:
        200:
          description: Data updated
        400:
          description: Changes were invalid
        401:
          description: Unauthorized or not allowed to modify data
        404:
          description: Crate does not exist

  /euroCrate/{id}/print:
    get:
      operationId: printEuroCrate
      summary: "Generate a printable document for the selected euroCrate."
      security:
        - springCookieAuth: [ ]
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EuroCrateId"
      responses:
        "200":
          description: "Successfully generated the euroPallet document."
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "404":
          description: "Selected euroPallet does not exist."

  /euroCrate/{id}/packingLists:
    get:
      operationId: getPackingListsOfCrate
      summary: Get the associated packing list of the specified crate, if present
      parameters:
        - name: "id"
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/EuroCrateId"
      responses:
        200:
          description: Found the packing list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicPackingListDto"
        404:
          description: Euro crate does not exist, or no associated packing list

  /euroPallet:
    get:
      operationId: getAllEuroPallets
      summary: "Get all euro pallets."
      responses:
        "200":
          description: "Successfully retrieved all euroPallets."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EuroPalletDto'
    post:
      operationId: createEuroPallet
      summary: "Create a new euro pallet."
      security:
        - springCookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEuroPalletDto'
      responses:
        "201":
          description: "Successfully created a new euro pallet."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EuroPalletDto'
        "400":
          description: "Provided pallet information does not match specifications."
        "401":
          description: "User did not provide valid session details and cannot create a new pallet."
        "403":
          description: "User does not have permission to create new pallets."

  /euroPallet/{euroPalletId}:
    get:
      operationId: getEuroPallet
      summary: "Get a specific euro pallet."
      parameters:
        - name: "euroPalletId"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Successfully retrieved euro pallet."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EuroPalletDto"
        "404":
          description: "Selected euro pallet does not exist."
        "400":
          description: "euroPalletId is not a whole number or doesn't fit in 64 bits"

  /euroPallet/{euroPalletId}/lastLocation:
    post:
      operationId: updateLastLocationOfEuroPallet
      summary: "Update the last known location of a Euro pallet."
      security:
        - springCookieAuth: [ ]
      parameters:
        - name: "euroPalletId"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationDto"
      responses:
        "200":
          description: "Successfully updated the last location."
        "401":
          description: "User did not provide valid session details."
        "404":
          description: "Selected euro pallet does not exist."
        "400":
          description: "euroPalletId is not a whole number or doesn't fit in 64 bits, request body is invalid"


  /euroPallet/{euroPalletId}/print:
    get:
      operationId: printEuroPallet
      summary: "Generate a short DIN A5 printable document for the physical pallet."
      security:
        - springCookieAuth: [ ]
      parameters:
        - name: "euroPalletId"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Successfully generated the pallet document."
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "404":
          description: "Selected pallet does not exist."
        "400":
          description: "euroPalletId is not a whole number or doesn't fit in 64 bits"

  /packingList:
    get:
      operationId: getAllPackingLists
      summary: "Get all packing lists without their crates."
      responses:
        "200":
          description: "Successfully retrieved all packing lists."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BasicPackingListDto"
    post:
      operationId: createPackingList
      summary: "Create a new packing list."
      security:
        - springCookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPackingListDto"
      responses:
        "201":
          description: "Successfully created a new packing list."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackingListDto'
        "400":
          description: "Provided packing list information does not match specifications."
        "401":
          description: "User did not provide valid session details and cannot create a new packing list."
        "403":
          description: "User does not have permission to create new packing lists."

  /packingList/{packingListId}:
    get:
      operationId: getPackingList
      summary: "Get packing list"
      parameters:
        - in: path
          description: "Identifier of packing list."
          name: packingListId
          schema:
            type: integer
            format: int64
          required: true
        - in: query
          description: "Filter packing list by crates that belong to a specific operation center."
          name: 'oc'
          schema:
            $ref: "#/components/schemas/OperationCenterDto"
      responses:
        "200":
          description: "Successfully retrieved packing list."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackingListDto"

  /packingList/{packingListId}/modify:
    post:
      operationId: modifyPackingList
      summary: Modify multiple properties of a packing list
      security:
        - springCookieAuth: []
      parameters:
        - name: "packingListId"
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PackingListPatchDto"
      responses:
        200:
          description: Modified packing list
        401:
          description: Not logged in
        403:
          description: Logged in, not permitted to modify packing list
        404:
          description: Packing list does not exist
        400:
          description: Invalid patch

  /packingList/{packingListId}/print:
    get:
      operationId: printPackingList
      summary: "Generate a detailed DIN A4 printable document for the packing list."
      parameters:
        - name: "packingListId"
          in: path
          required: true
          description: ID of the packing list
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Successfully generated the packing list document."
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "404":
          description: "Selected packing list does not exist."

  /printMultiple:
    post:
      operationId: printMultipleThings
      summary: Print multiple elements into one A4 PDF
      security:
        - springCookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PrintMultipleDto"
      responses:
        200:
          description: Successfully printed
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        404:
          description: A resource didnt exist

  /users/me:
    get:
      operationId: getLoggedInUser
      summary: Gets the currently logged in user
      security:
        - springCookieAuth: []
      responses:
        200:
          description: User is logged in, here are the details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        401:
          description: user is not logged in

  /users/other/{name}:
    get:
      operationId: getSpecificUser
      summary: Get user by username
      security:
        - springCookieAuth: [ ]
      parameters:
        - name: "name"
          in: path
          required: true
          description: Username
          schema:
            type: string
            minLength: 3
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        404:
          description: User not found
        401:
          description: user is not logged in
        403:
          description: Missing permission


  /users/{username}:
    post:
      operationId: modifyUser
      summary: Modify a user
      security:
        - springCookieAuth: [ ]
      parameters:
        - name: username
          in: path
          required: true
          description: Username
          schema:
            type: string
            minLength: 3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authorities:
                  description: New authorities
                  type: array
                  items:
                    $ref: "#/components/schemas/AuthorityEnumDto"
                hashedPassword:
                  description: New BCrypt hashed password
                  maxLength: 72
                  example: $2a$10$cSa230uf6gXphAxdaFuzHuZ3nlxeCPVm1XUlwKuP1BP2BcnnkJI4S
                  type: string
                active:
                  description: New active status
                  type: boolean
      responses:
        200:
          description: User modified
        401:
          description: Not logged in
        403:
          description: Missing permission
    delete:
      operationId: deleteUser
      summary: Delete a user
      security:
        - springCookieAuth: [ ]
      parameters:
        - name: username
          in: path
          required: true
          description: Username
          schema:
            type: string
            minLength: 3
      responses:
        200:
          description: User deleted
        404:
          description: User not found
        401:
          description: Not logged in
        403:
          description: Missing permission

  /users:
    put:
      operationId: createUser
      summary: Create a user
      security:
        - springCookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UserDto"
                - type: object
                  properties:
                    hashedPassword:
                      description: BCrypt hashed password
                      maxLength: 72
                      example: $2a$10$cSa230uf6gXphAxdaFuzHuZ3nlxeCPVm1XUlwKuP1BP2BcnnkJI4S
                      type: string
                  required:
                    - hashedPassword
      responses:
        200:
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        401:
          description: Not logged in
        403:
          description: Missing permission
    get:
      operationId: getUsers
      summary: Get all users
      security:
        - springCookieAuth: [ ]
      responses:
        200:
          description: User list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"

  /login:
    post:
      operationId: login
      summary: "Login and create an authenticated session."
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "301":
          description: "Successfully logged in and created a session."
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
        "400":
          description: "Provided login details do not full the specifications."
        "401":
          description: "Provided login details were not sufficient to create a new session."

components:
  securitySchemes:
    springCookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID

  schemas:
    EuroCrateId:
      type: integer
      format: int64

    PackingListPatchDto:
      type: object
      properties:
        deliveryState:
          $ref: "#/components/schemas/DeliveryStateEnumDto"
        addCrates:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/EuroCrateId"
        removeCrates:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/EuroCrateId"

    EuroCratePatchDto:
      allOf:
        - $ref: "#/components/schemas/InformationDto"
        - type: object
          properties:
            deliveryState:
              $ref: "#/components/schemas/DeliveryStateEnumDto"
            location:
              $ref: "#/components/schemas/LocationDto"

    PrintMultipleDto:
      # todo das kann man eigentlich vereinfachen
      type: array
      items:
        oneOf:
          - type: object
            properties:
              type:
                description: Type of the print (Crate)
                enum:
                  - "Crate"
              id:
                $ref: "#/components/schemas/EuroCrateId"
            required:
              - type
              - id
          - type: object
            properties:
              type:
                description: Type of the print (Pallet)
                enum:
                  - "Pallet"
              id:
                type: integer
                format: int64
                description: ID of the pallet
            required:
              - type
              - id

    NewEuroCrateDto:
      allOf:
        - $ref: "#/components/schemas/InformationDto"
        - $ref: "#/components/schemas/DeliveryStateDto"
        - type: object
          properties:
            operationCenter:
              $ref: "#/components/schemas/OperationCenterDto"
            name:
              description: "A short distinct name describing the contents and/or target location of the euro crate. Has to be unique in combination with the OC."
              type: string
              minLength: 1
            returnBy:
              description: "At which date should the euro crate be returned to the logistics operation center."
              type: string
              format: date
            location:
              $ref: "#/components/schemas/LocationDto"
          required:
            - operationCenter
            - name
            - returnBy
            - location

    EuroCrateDto:
      allOf:
        - $ref: "#/components/schemas/NewEuroCrateDto"
        - type: object
          properties:
            internalId:
              description: 64 bit id describing this crate uniquely
              type: integer
              format: int64
          required:
            - internalId

    NewEuroPalletDto:
      allOf:
        - $ref: "#/components/schemas/InformationDto"
        - type: object
          properties:
            location:
              $ref: "#/components/schemas/LocationDto"
          required:
            - location

    EuroPalletDto:
      allOf:
        - $ref: '#/components/schemas/NewEuroPalletDto'
        - type: object
          properties:
            euroPalletId:
              description: "Unique identifier for the euro pallet."
              type: integer
              format: int64
          required:
            - euroPalletId

    NewPackingListDto:
      type: object
      properties:
        name:
          description: "Will be combined with a numeric value to create the ID of the pallet."
          type: string
          minLength: 1
        packedOnPallet:
          description: Identifier for Euro pallet.
          type: integer
          format: int64
      required:
        - name
        - packedOnPallet

    BasicPackingListDto:
      allOf:
        - $ref: "#/components/schemas/DeliveryStateDto"
        - type: object
          properties:
            packingListName:
              description: "Human readable name"
              type: string
              minLength: 1
              example: "Lieferung Finanzen"
            packingListId:
              description: "Internal ID for this packing list"
              type: integer
              format: int64
            packedOn:
              $ref: "#/components/schemas/EuroPalletDto"
          required:
            - packingListId
            - packedOn
            - deliveryState

    PackingListDto:
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicPackingListDto"
        - type: object
          properties:
            packedCrates:
              type: array
              items:
                $ref: "#/components/schemas/EuroCrateDto"

    DeliveryStateDto:
      type: object
      properties:
        deliveryState:
          $ref: "#/components/schemas/DeliveryStateEnumDto"
      required:
        - deliveryState

    InformationDto:
      type: object
      properties:
        information:
          description: "Free-form text describing the contents of the entity."
          type: string

    DeliveryStateEnumDto:
      type: string
      enum:
        - "Packing"
        - "WaitingForDelivery"
        - "TravelingToGPN"
        - "WaitingAtGPN"
        - "InDelivery"
        - "Delivered"

    LocationDto:
      type: object
      description: "
        locationType indicates what kind of location is present in the DTO.
        Only the relevant field will be not null.
        For example, for the location type 'AtOperationCenter' 
        the field 'operationCenter' is not null.
      "
      properties:
        locationType:
          $ref: "#/components/schemas/LocationTypeDto"
        logisticsLocation:
          $ref: "#/components/schemas/LogisticsLocationDto"
        operationCenter:
          $ref: "#/components/schemas/OperationCenterDto"
        somewhereElse:
          type: string
      required:
        - locationType

    LocationTypeDto:
      type: string
      enum:
        - "Logistics"
        - "AtOperationCenter"
        - "SomewhereElse"

    LogisticsLocationDto:
      type: string
      enum:
        - "Entropia"
        - "InTransport"
        - "LOC"
        - "UnknownAtGPN"

    OperationCenterDto:
      type: string
      enum:
        - "Finanzen"
        - "Backoffice"
        - "Content"
        - "Heralding"
        - "DesignUndMotto"
        - "PresseUndSocialMedia"
        - "LoungeControl"
        - "LoungeTechnik"
        - "Infodesk"
        - "Merchdesk"
        - "Schilder"
        - "Badges"
        - "Trolle"
        - "Kueche"
        - "WOC"
        - "Fruehstueck"
        - "RaumDer1000Namen"
        - "Bar"
        - "Spaeti"
        - "Aussenbar"
        - "Kaffeebar"
        - "Cocktailbar"
        - "NOC"
        - "POC"
        - "VOC"
        - "BuildupAndTeardown"
        - "Infrastruktur"
        - "Deko"
        - "SafeR"
        - "SilentHacking"
        - "Projektleitung"

    LoginDto:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 255
        password:
          type: string
      required:
        - username
        - password

    UserDto:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 255
        authorities:
          type: array
          items:
            $ref: "#/components/schemas/AuthorityEnumDto"
        enabled:
          type: boolean
          description: Account enabled?
      required:
        - username
        - authorities
        - enabled

    AuthorityEnumDto:
      type: string
      # die müssen caps sein wegen @HasAuthority, der enum -> string converter
      # nutzt toString was den namen vom enum gibt. codegen macht die namen caps
      # -> die namen hier müssen mit den java enum namen übereinstimmen, die caps sind
      enum:
        - 'MANAGE_USERS'
        - 'MANAGE_RESOURCES'
        - 'PRINT'
