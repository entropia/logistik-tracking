openapi: "3.0.4"
info:
  title: "API for the goods coordination system of the GPN LOC."
  version: "0.1.0"
servers:
  - url: "http://localhost:8080/api"
    description: "Local development server."
paths:
  /euroCrate:
    get:
      operationId: getAllEuroCrates
      summary: "Get all euro crates."
      responses:
        "200":
          description: "Successfully retrieved all euro crates."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EuroCrateDto'
    post:
      operationId: createNewEuroCrate
      summary: "Create a new euro crate."
      security:
        - springCookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EuroCrateDto'
      responses:
        "201":
          description: "Successfully created a new euro crate."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EuroCrateDto'
        "400":
          description: "Provided euro crate information does not match specifications."
        "401":
          description: "User did not provide valid session details and cannot create a new euro crate."
        "403":
          description: "User does not have permission to create new euro crates."
        "409":
          description: "A euro crate with this combination of name and OC already exists."

  /euroCrate/{operationCenter}-{euroCrateName}:
    get:
      operationId: getEuroCrate
      summary: "Get a specific euro crates with all details."
      parameters:
        - name: "operationCenter"
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/OperationCenterDto"
        - name: "euroCrateName"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "The euroCrate was successfully retrieved."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EuroCrateDto"
        "404":
          description: "The selected euroCrate does not exist."

  /euroCrate/{operationCenter}-{euroCrateName}/deliveryState:
    put:
      operationId: modifyDeliveryStateOfCrate
      summary: "Change the delivery state of the selected crate"
      security:
        - springCookieAuth: [ ]
      parameters:
        - name: "operationCenter"
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/OperationCenterDto"
        - name: "euroCrateName"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeliveryStateDto"
      responses:
        "200":
          description: "The delivery state was successfully changed."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EuroCrateDto"
        "400":
          description: "Provided changes were invalid."
        "401":
          description: "User did not provide valid session details and cannot change selected crate."
        "404":
          description: "The selected crate does not exist."

  /euroCrate/{operationCenter}-{euroCrateName}/location:
    put:
      operationId: modifyLocationOfCrate
      summary: "Change the location of the selected crate"
      security:
        - springCookieAuth: [ ]
      parameters:
        - name: "operationCenter"
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/OperationCenterDto"
        - name: "euroCrateName"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationDto"
      responses:
        "200":
          description: "The location was successfully changed."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EuroCrateDto"
        "400":
          description: "Provided changes were invalid."
        "401":
          description: "User did not provide valid session details and cannot change selected crate."
        "404":
          description: "The selected crate does not exist."

  /euroCrate/{operationCenter}-{euroCrateName}/information:
    put:
      operationId: modifyInformationOfCrate
      summary: "Change the free-text information of the selected crate"
      security:
        - springCookieAuth: [ ]
      parameters:
        - name: "operationCenter"
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/OperationCenterDto"
        - name: "euroCrateName"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: "The information was successfully changed."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EuroCrateDto"
        "400":
          description: "Provided changes were invalid."
        "401":
          description: "User did not provide valid session details and cannot change selected crate."
        "404":
          description: "The selected crate does not exist."

  /euroCrate/{operationCenter}-{euroCrateName}/print:
    get:
      operationId: printEuroCrate
      summary: "Generate a printable document for the selected euroCrate."
      parameters:
        - name: "operationCenter"
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/OperationCenterDto"
        - name: "euroCrateName"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully generated the euroPallet document."
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "404":
          description: "Selected euroPallet does not exist."

  /euroPallet:
    get:
      operationId: getAllEuroPallets
      summary: "Get all euro pallets."
      responses:
        "200":
          description: "Successfully retrieved all euroPallets."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EuroPalletDto'
    post:
      operationId: createEuroPallet
      summary: "Create a new euro pallet."
      security:
        - springCookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEuroPalletDto'
      responses:
        "201":
          description: "Successfully created a new euro pallet."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EuroPalletDto'
        "400":
          description: "Provided pallet information does not match specifications."
        "401":
          description: "User did not provide valid session details and cannot create a new pallet."
        "403":
          description: "User does not have permission to create new pallets."

  /euroPallet/{euroPalletId}:
    get:
      operationId: getEuroPallet
      summary: "Get a specific euro pallet."
      parameters:
        - name: "euroPalletId"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully retrieved euro pallet."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EuroPalletDto"
        "404":
          description: "Selected euro pallet does not exist."

  /euroPallet/{euroPalletId}/lastLocation:
    put:
      operationId: updateLastLocationOfEuroPallet
      summary: "Update the last known location of a Euro pallet."
      security:
        - springCookieAuth: [ ]
      parameters:
        - name: "euroPalletId"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationDto"
      responses:
        "200":
          description: "Successfully updated the last location."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EuroPalletDto"
        "401":
          description: "User did not provide valid session details."
        "404":
          description: "Selected euro pallet does not exist."


  /euroPallet/{euroPalletId}/print:
    get:
      operationId: printEuroPallet
      summary: "Generate a short DIN A5 printable document for the physical pallet."
      parameters:
        - name: "euroPalletId"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully generated the pallet document."
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "404":
          description: "Selected pallet does not exist."

  /packingList:
    get:
      operationId: getAllPackingLists
      summary: "Get all packing lists without their crates."
      responses:
        "200":
          description: "Successfully retrieved all packing lists."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BasicPackingListDto"
    post:
      operationId: createPackingList
      summary: "Create a new packing list."
      security:
        - springCookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPackingListDto"
      responses:
        "201":
          description: "Successfully created a new packing list."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackingListDto'
        "400":
          description: "Provided packing list information does not match specifications."
        "401":
          description: "User did not provide valid session details and cannot create a new packing list."
        "403":
          description: "User does not have permission to create new packing lists."

  /packingList/{packingListId}:
    get:
      operationId: getPackingList
      summary: "Get packing list"
      parameters:
        - in: path
          description: "Identifier of packing list."
          name: packingListId
          schema:
            type: string
          required: true
        - in: query
          description: "Filter packing list by crates that belong to a specific operation center."
          name: 'oc'
          schema:
            $ref: "#/components/schemas/OperationCenterDto"
      responses:
        "200":
          description: "Successfully retrieved packing list."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackingListDto"

  /packingList/{packingListId}/deliveryState/:
    put:
      operationId: changeDeliveryStateOfPackingList
      summary: "Changes the delivery state of a packing list."
      security:
        - springCookieAuth: [ ]
      parameters:
        - in: path
          description: "Identifier of packing list."
          name: packingListId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeliveryStateDto"
      responses:
        "200":
          description: "Successfully modified the packing list."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackingListDto"
        "401":
          description: "User did not provide valid session details."
        "404":
          description: "Selected packing list does not exist."

  /packingList/{packingListId}/euroCrate/{euroCrateId}:
    put:
      operationId: addEuroCrateToPackingList
      summary: "Add the selected euro crate to a packing list if the packing list is in the state 'Packing'"
      security:
        - springCookieAuth: [ ]
      parameters:
        - name: "packingListId"
          in: path
          required: true
          schema:
            type: string
        - name: "euroCrateId"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "User successfully added a crate to the packing list."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackingListDto"
        "401":
          description: "User did not provide valid session details."
        "403":
          description: "User does not have permission."
        "404":
          description: "Selected pallet or selected crate do not exist."
        "409":
          description: "
          The selected packing list is not in the state 'Packing' anymore and cannot be modified.
          Or, the selected crate is already associated with another packing list. 
          In this case, remove it from the other packing list first.
          "
    delete:
      operationId: removeEuroCrateFromPackingList
      summary: "Remove the selected crate from the packing list if the packing list is in the state 'Packing'."
      security:
        - springCookieAuth: []
      parameters:
        - name: "packingListId"
          in: path
          required: true
          schema:
            type: string
        - name: "euroCrateId"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "User successfully removed the crate from the packing list."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackingListDto"
        "401":
          description: "User did not provide valid session details."
        "403":
          description: "User does not have permission."
        "404":
          description: "Selected packing list or selected crate do not exist or selected crate does not belong to packing list."
        "409":
          description: "The selected packing list is not in the state 'Packing' and cannot be modified."

  /packingList/{packingListId}/print:
    get:
      operationId: printPackingList
      summary: "Generate a detailed DIN A4 printable document for the packing list."
      parameters:
        - name: "packingListId"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successfully generated the packing list document."
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "404":
          description: "Selected packing list does not exist."

  /login:
    post:
      operationId: login
      summary: "Login and create an authenticated session."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "301":
          description: "Successfully logged in and created a session."
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionDto"
        "400":
          description: "Provided login details do not full the specifications."
        "401":
          description: "Provided login details were not sufficient to create a new session."

components:
  securitySchemes:
    springCookieAuth:
      type: apiKey
      in: cookie
      name: JSESSIONID

  schemas:
    EuroCrateDto:
      type: object
      properties:
        operationCenter:
          $ref: "#/components/schemas/OperationCenterDto"
        name:
          description: "A short distinct name describing the contents and/or target location of the euro crate. Has to be unique in combination with the OC."
          type: string
          minLength: 1
        returnBy:
          description: "At which date should the euro crate be returned to the logistics operation center."
          type: string
          format: date
        information:
          description: "Free-form text describing the contents of the euro crate."
          type: string
        location:
          $ref: "#/components/schemas/LocationDto"
        deliveryState:
          $ref: "#/components/schemas/DeliveryStateDto"
      required:
        - operationCenter
        - name
        - returnBy
        - location

    NewEuroPalletDto:
      type: object
      properties:
        information:
          type: string
          description: "Free-form text describing the euroPallet"
        location:
          $ref: "#/components/schemas/LocationDto"
      required:
        - location

    EuroPalletDto:
      allOf:
        - $ref: '#/components/schemas/NewEuroPalletDto'
        - type: object
          properties:
            euroPalletId:
              description: "Unique identifier for the euro pallet."
              type: string
              minLength: 1
          required:
            - euroPalletId

    NewPackingListDto:
      type: object
      properties:
        name:
          description: "Will be combined with a numeric value to create the ID of the pallet."
          type: string
          minLength: 1
        packedOnPallet:
          description: Identifier for Euro pallet.
          type: string
          minLength: 1
      required:
        - name
        - packedOnPallet

    BasicPackingListDto:
      type: object
      properties:
        packingListId:
          description: "ID consists of name and a unique numeric value."
          type: string
          example: "aName-123"
        packedOn:
          $ref: "#/components/schemas/EuroPalletDto"
        deliveryState:
          $ref: "#/components/schemas/DeliveryStateDto"
      required:
        - packingListId
        - packedOn
        - deliveryState

    PackingListDto:
      type: object
      allOf:
        - $ref: "#/components/schemas/BasicPackingListDto"
        - type: object
          properties:
            packedCrates:
              type: array
              items:
                $ref: "#/components/schemas/EuroCrateDto"

    DeliveryStateDto:
      type: string
      enum:
        - "Packing"
        - "WaitingForDelivery"
        - "TravelingToGPN"
        - "WaitingAtGPN"
        - "InDelivery"
        - "Delivered"

    LocationDto:
      type: object
      description: "
        locationType indicates what kind of location is present in the DTO.
        Only the relevant field will be not null.
        For example, for the location type 'AtOperationCenter' 
        the field 'operationCenter' is not null.
      "
      properties:
        locationType:
          $ref: "#/components/schemas/LocationTypeDto"
        logisticsLocation:
          $ref: "#/components/schemas/LogisticsLocationDto"
        operationCenter:
          $ref: "#/components/schemas/OperationCenterDto"
        somewhereElse:
          type: string
      required:
        - locationType

    LocationTypeDto:
      type: string
      enum:
        - "Logistics"
        - "AtOperationCenter"
        - "SomewhereElse"

    LogisticsLocationDto:
      type: string
      enum:
        - "Entropia"
        - "InTransport"
        - "LOC"
        - "UnknownAtGPN"

    OperationCenterDto:
      type: string
      enum:
        - "Finanzen"
        - "Backoffice"
        - "Content"
        - "Heralding"
        - "DesignUndMotto"
        - "PresseUndSocialMedia"
        - "LoungeControl"
        - "LoungeTechnik"
        - "Infodesk"
        - "Merchdesk"
        - "Schilder"
        - "Badges"
        - "Trolle"
        - "Kueche"
        - "WOC"
        - "Fruehstueck"
        - "RaumDer1000Namen"
        - "Bar"
        - "Spaeti"
        - "Aussenbar"
        - "Kaffeebar"
        - "Cocktailbar"
        - "NOC"
        - "POC"
        - "VOC"
        - "BuildupAndTeardown"
        - "Infrastruktur"
        - "Deko"
        - "SafeR"
        - "SilentHacking"
        - "Projektleitung"

    LoginDto:
      type: object
      properties:
        username:
          type: string
          minLength: 3
        password:
          type: string
      required:
        - username
        - password

    SessionDto:
      type: object
      properties:
        permissionGroup:
          $ref: "#/components/schemas/PermissionGroupEnumDto"
      required:
        - sessionKey

    PermissionGroupEnumDto:
      type: string
      enum:
        - 'RegularUser'
        - 'Organizer'
